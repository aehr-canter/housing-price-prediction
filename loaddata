import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.impute import SimpleImputer
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline


def preprocess_housing_data(csv_file_path, target_column='SalePrice', 
                           numeric_impute_strategy='median', 
                           categorical_impute_strategy='most_frequent',
                           return_preprocessor=False):
    
    data = pd.read_csv(csv_file_path)
    
    X = data.drop(columns=[target_column])
    y = data[target_column]

    numeric_features = X.select_dtypes(include=['int64', 'float64']).columns
    categorical_features = X.select_dtypes(include=['object']).columns
    
    numeric_transformer = Pipeline(steps=[
        ('imputer', SimpleImputer(strategy=numeric_impute_strategy)),
        ('scaler', StandardScaler())
    ])
    
    categorical_transformer = Pipeline(steps=[
        ('imputer', SimpleImputer(strategy=categorical_impute_strategy)),
        ('onehot', OneHotEncoder(handle_unknown='ignore'))
    ])
    
    preprocessor = ColumnTransformer(
        transformers=[
            ('num', numeric_transformer, numeric_features),
            ('cat', categorical_transformer, categorical_features)
        ]
    )
    
    X_preprocessed = preprocessor.fit_transform(X)
    
    if return_preprocessor:
        return X_preprocessed, y, preprocessor
    else:
        return X_preprocessed, y


def preprocess_new_data(X_new, fitted_preprocessor):
    
    return fitted_preprocessor.transform(X_new)


if __name__ == "__main__":
    
    X_processed, y = preprocess_housing_data('AmesHousing.csv')
    
    X_processed, y, preprocessor = preprocess_housing_data(
        'AmesHousing.csv', 
        return_preprocessor=True
    )
    
    X_train, X_test, y_train, y_test = train_test_split(
        X_processed, y, test_size=0.2, random_state=42
    )
    
    print(f"Training set shape: {X_train.shape}")
    print(f"Test set shape: {X_test.shape}")
    print(f"Target variable shape: {y.shape}")
    
    # If you have new data later, you can use:
    # X_new_processed = preprocess_new_data(X_new, preprocessor)